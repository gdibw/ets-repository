<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EIDe3500038-e37c-4dcf-806c-6bc82d585b3b" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 https://resources.etf-validator.net/schema/v2/val/ignoreRef.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>http://github.com/inspire-eu-validation/ets-repository/metadata/xml</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance class: XML encoding of ISO 19115/19119 metadata</label>
	<description><![CDATA[This test suite examines XML documents containing gmd:MD_Metadata records against basic requirements for the encoding for metadata in INSPIRE.<br/><br/>
<b>This is a draft version. It has limitations and is expected to contain errors.</b> Please report any issues or problems <a href="https://github.com/inspire-eu-validation/community/wiki/Your-feedback" target="_blank">in GitHub</a>.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/master/xml-encoding" target="_blank">Conformance Class 'XML encoding of ISO 19115/19119 metadata'</a>]]></description>
	<reference>../../../inspire-md-bsxets.xq</reference>
	<version>0.2.0</version>
	<author>interactive instruments GmbH</author>
	<creationDate>2016-08-30T00:00:00Z</creationDate>
	<lastEditor>interactive instruments GmbH</lastEditor>
	<lastUpdateDate>2017-02-21T17:00:00Z</lastUpdateDate>
	<tags>
		<tag ref="EID54d5f755-e20c-40a7-ab72-5600c71dd049"/>
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<ParameterList name="ETF Standard Parameters for metadata XML test objects">
		<!-- TODO clean up, currently disabled due to open issues with schema validation
		<parameter name="encoding" required="false">
			<defaultValue>CSW ISO AP 1.0.0</defaultValue>
			<description ref="TR.metadataEncoding"/>
			<allowedValues>^(CSW ISO AP 1\.0\.0|ISO/TS 19139)$</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="Schema_file" required="false">
			<description ref="TR.metadataSchema"/>
			<allowedValues>^(apiso\.xsd|gmd\.xsd|apiso-csw\.xsd|gmd-csw\.xsd)?$</allowedValues>
			<type>string</type>
		</parameter>
		-->
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EID5a60dded-0cb0-4977-9b06-16c6c2321d2e"/>
	</supportedTestObjectTypes>
	<testModules>
		<TestModule id="EID2ce99786-abb0-494b-af69-7cdfeb25947a">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EIDe3500038-e37c-4dcf-806c-6bc82d585b3b"/>
			<testCases>
				<TestCase id="EID242272e0-3f0a-4e9c-9643-657c4d6d304a">
					<label>Schema validation</label>
					<description>Validation of the XML documents under test against the ISO/OGC metadata schemas.</description>
					<parent ref="EID2ce99786-abb0-494b-af69-7cdfeb25947a"/>
					<testSteps>
						<TestStep id="EID27dc9b72-0084-4f4a-981b-afc16e8d6e5e">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID242272e0-3f0a-4e9c-9643-657c4d6d304a"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID04c71089-1d8c-4e67-897c-11908e78e2d4">
									<label>md-xml.a.1: Validate XML documents</label>
									<description><![CDATA[<p>Validate each document against the schema(s) specified in the xsi:schemaLocation attribute using strict XML schema validation.</p>
<p>Official XML schemas are currently found in two separate locations:</p>
<ul>
<li>ISO repository for publicly available standards. The ISO 19139 schemas can be found at <a href="http://standards.iso.org/ittf/PubliclyAvailableStandards/ISO_19139_Schemas/">http://standards.iso.org/ittf/PubliclyAvailableStandards/ISO_19139_Schemas/</a>.</li>
<li>OGC Schema repository. The ISO 19139 schemas are located at <a href="http://schemas.opengis.net/iso/19139/20070417/">http://schemas.opengis.net/iso/19139/20070417/</a> and <a href="http://schemas.opengis.net/iso/19139/20060504/">http://schemas.opengis.net/iso/19139/20060504/</a>. The difference in the schemas is the GML version. The version dated "2007-04-17" uses GML 3.2.1, the version dated "2006-06-04" use GML 3.2.0, which was never approved or published by OGC. The major difference is that GML 3.2.0 schemas are defined in the namespace http://www.opengis.net/gml whereas GML 3.2.1 schemas are defined in the namespace http://www.opengis.net/gml/3.2.<br/>
The ISO AP schemas are located at <a href="http://schemas.opengis.net/csw/2.0.2/profiles/apiso/">http://schemas.opengis.net/csw/2.0.2/profiles/apiso/</a>. The ISO AP schemas are bound to the ISO 19139 schemas dated "2006-06-04".<br/>
The schemas located in the ISO repository for publicly available standards are the same as the ISO 19139 schemas dated "2007-04-17".</li>
</ul>
I.e., each document is validated using the following XML schema definition:
<ul>
<li>If the parameter 'encoding' is 'CSW ISO AP 1.0.0': <a href="http://schemas.opengis.net/csw/2.0.2/profiles/apiso/1.0.0/apiso.xsd" target="_blank">http://schemas.opengis.net/csw/2.0.2/profiles/apiso/1.0.0/apiso.xsd</a></li>
<li>If the parameter 'encoding' is 'ISO/TS 19139': <a href="http://schemas.opengis.net/iso/19139/20070417/gmd/gmd.xsd" target="_blank">http://schemas.opengis.net/iso/19139/20070417/gmd/gmd.xsd</a></li>
<li>If no encoding information is provided with the test, the encoding is determined by inspecting the schemaLocation based on the schema documents used for the 'http://www.isotc211.org/2005/gmd' namespace. If this information cannot be determined, assume 'CSW ISO AP 1.0.0'.</li>
</ul>
<p><b>Known limitations:</b></p>
<ul>
<li>Only schema validation against the schemas provided in the xsi:schemaLocation attribute is currently supported. The built-in validator used for validating XML documents against a pre-selected schema, e.g. apiso.xsd, has issues that need to be resolved first.</li>
<li>Note that validation is done on a file-by-file basis and access to many remote schema files is time consuming. I.e. it will be <em>much</em> faster to validate a single document with many metadata records than many files with a single record each.</li>
</ul>
<p>Source: <a href="http://inspire.ec.europa.eu/id/ats/metadata/master/xml-encoding/schema-validation" target="_blank">Abstract Test Case 'Schema validation'</a></p>]]></description>
									<parent ref="EID27dc9b72-0084-4f4a-981b-afc16e8d6e5e"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
(: TODO BaseX validation is incomplete and needs to be replaced by a custom validation module, see 'known limitations' :)
let $errors := (
	if ($validationErrors) then
		for $error in $validationErrors
		return local:addMessage('TR.validationError', map { 'text': $error })
	else
		for $file in $db
		  return 
			 if ($file/element()/@xsi:schemaLocation) then 
				let $start := prof:current-ms()
				let $infos := validate:xsd-info($file)
				let $duration := prof:current-ms()-$start
				let $logentry := local:log('Validating file ' || local:filename($file) || ': ' || $duration || ' ms')
				let $errors := count($infos)
				return
				  if ($errors&gt;0) then
					 (local:addMessage('TR.invalidSchema', map { 'filename': local:filename($file), 'count': string($errors) }),
					  for $info in $infos return local:addMessage('TR.xmlSchemaError', map { 'filename': local:filename($file), 'error': $info }))
				  else ()
			 else
				for $record in $records[db:path(.)=db:path($file/element())]
				  let $id := $record/gmd:fileIdentifier/gco:CharacterString/text()
				  let $infos := validate:xsd-info($record)
				  let $errors := count($infos)
				  return
					 if ($errors&gt;0) then
						(local:addMessage('TR.invalidSchemaRecord', map { 'filename': local:filename($record), 'id': $id, 'count': string($errors) }),
						for $info in $infos return local:addMessage('TR.xmlSchemaErrorRecord', map { 'filename': local:filename($record), 'id': $id, 'error': $info }))
					 else ())[position() le $limitErrors]
return
(if ($errors) then 'FAILED' else 'PASSED',
 local:error-statistics('TR.filesWithErrors', count($errors[@ref eq 'TR.invalidSchema'])),
 local:error-statistics('TR.recordsWithErrors', count($errors[@ref eq 'TR.invalidSchemaRecord'])),
 $errors[position() le $limitErrors])
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.xmlSchemaError"/>
										<translationTemplate ref="TR.invalidSchema"/>
										<translationTemplate ref="TR.filesWithErrors"/>
										<translationTemplate ref="TR.xmlSchemaErrorRecord"/>
										<translationTemplate ref="TR.invalidSchemaRecord"/>
										<translationTemplate ref="TR.recordsWithErrors"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>
